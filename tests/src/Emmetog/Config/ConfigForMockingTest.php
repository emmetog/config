<?php

namespace Emmetog\Config;

define('BASE_DIR', dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/');
require_once BASE_DIR . 'tests/init_tests.php';

use Emmetog\Cache\NullCache;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-05-01 at 19:33:47.
 */
class ConfigForMockingTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ConfigForMocking
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
	$this->object = new ConfigForMocking(BASE_DIR . 'config', new NullCache());
    }

    public function testSetGetAllowUnmockedClasses()
    {
	// isUnmockedClassesAllowed() should be false by default
	$this->assertFalse($this->object->isUnmockedClassesAllowed());

	$this->object->setUnmockedClassesAllowed(true);
	$this->assertTrue($this->object->isUnmockedClassesAllowed());

	$this->object->setUnmockedClassesAllowed(false);
	$this->assertFalse($this->object->isUnmockedClassesAllowed());
    }

    /**
     * Test the getClass() method trying to get an unmocked class, we expect an exception.
     */
    public function testGetClassWhenClassIsNotMocked()
    {
	$this->object->setUnmockedClassesAllowed(false);

	$this->setExpectedException('Emmetog\Config\ConfigForMockingUnmockedClassRequestedException',
			     'The class "stdClass" was not mocked');

	$this->object->getClass('stdClass');
    }

    /**
     * Test the setClass() and getClass() methods.
     */
    public function testSetGetClass()
    {
	$testClass = $this->getMock('stdClass', array('testMe'));
	$testClass->expects($this->once())
		->method('testMe');

	$this->object->setClass('\Test\Class', $testClass);

	$storedTestClass = $this->object->getClass('\Test\Class');

	// Call the test method to make sure that it is the same object.
	$storedTestClass->testMe();
    }

    /**
     * Test the getClass() method when unmocked classes are allowed.
     * 
     * We expect to be able to get the class without any exceptions thrown.
     */
    public function testGetClassWhenUnmockedClassesAreAllowed()
    {
	$this->object->setUnmockedClassesAllowed(true);

	$testClass = $this->object->getClass('stdClass');

	$this->assertInstanceOf('stdClass', $testClass);
    }

}
